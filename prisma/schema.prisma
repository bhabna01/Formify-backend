generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  email        String     @unique
  passwordHash String
  isAdmin      Boolean    @default(false)
  isBlocked    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  forms        Form[]
  templates    Template[]
}

model Template {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  topic       String
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    Int
  forms       Form[]
  questions   Question[]
  author      User       @relation(fields: [authorId], references: [id])
  tags        Tag[]      @relation("TemplateTags")
  
}

model Question {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        String
  orderIndex  Int      @default(0)
  isRequired  Boolean  @default(false)
  templateId  Int
  answers     Answer[]
  template    Template @relation(fields: [templateId], references: [id])
  options     String?
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  templates Template[] @relation("TemplateTags")
}

model Form {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  templateId Int
  userId     Int
  answers    Answer[]
  template   Template @relation(fields: [templateId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Answer {
  id         Int      @id @default(autoincrement())
  value      String
  questionId Int
  formId     Int
  form       Form     @relation(fields: [formId], references: [id])
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}